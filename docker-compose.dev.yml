version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    ports:
      - '${FRONTEND_PORT:-3000}:3000'
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - /app/apps/frontend/node_modules
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    networks:
      - dev-network
    depends_on:
      - backend
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '-O',
          '/dev/null',
          'http://localhost:3000/',
          '||',
          'exit',
          '1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    ports:
      - '${PORT:-3001}:3001'
    volumes:
      - ./apps/backend:/app/apps/backend
      - /app/apps/backend/node_modules
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - BASE_SCRAPE_URL=${BASE_SCRAPE_URL}
      - HOST=${HOST:-localhost}
      - PORT=${PORT:-3001}
      - AUTH_SECRET=${AUTH_SECRET}
      - CRON_SERVICE_ENABLED=${CRON_SERVICE_ENABLED:-true}
      - CRON_SERVICE_FREQUENCY=${CRON_SERVICE_FREQUENCY}
    networks:
      - dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '-O',
          '/dev/null',
          'http://localhost:3001/api/',
          '||',
          'exit',
          '1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
  postgres:
    image: postgres:16-alpine
    container_name: backend-postgres
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dev-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: backend-redis
    ports:
      - '${REDIS_PORT:-6379}:6379'
    networks:
      - dev-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:

networks:
  dev-network:
    driver: bridge
